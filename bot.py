import logging
import asyncio

from aiogram import Bot, Dispatcher
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
from aiogram.filters import CommandStart, Command
from aiogram.fsm.storage.memory import MemoryStorage

from config import TELEGRAM_BOT_TOKEN
from handlers import start, info, prompt, generation, vectorize, buy
from handlers.check import (
    check_payment_command,      # /check
    check_payment_button,       # –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª"
    CHECK_BUTTON_TEXT,          # —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏
)
from utils.user_state import get_user_state, STATE_GENERATE, STATE_VECTORIZE, STATE_MENU
from utils.user_roles import load_db
from utils.payments import load_payments

# –õ–æ–≥–∏
logging.basicConfig(level=logging.INFO)
logging.getLogger("aiogram.event").setLevel(logging.DEBUG)

# –ë–æ—Ç –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä
defaults = DefaultBotProperties(parse_mode=ParseMode.HTML)
bot = Bot(token=TELEGRAM_BOT_TOKEN, default=defaults)
dp = Dispatcher(storage=MemoryStorage())

def is_generate_text(message):
    return (
        message.text
        and not message.text.startswith("/")
        and get_user_state(message.from_user.id) == STATE_GENERATE
    )

def is_vectorization_photo(message):
    return (
        message.photo
        and get_user_state(message.from_user.id) == STATE_VECTORIZE
    )

# –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –∫–Ω–æ–ø–∫–∞ "–Ω–∞–∑–∞–¥" / "–≤ –º–µ–Ω—é"
def is_back(m):
    t = (m.text or "").replace("\uFE0F", "").strip()
    return t in ("‚¨ÖÔ∏è –í –º–µ–Ω—é", "‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "–ù–∞–∑–∞–¥")

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤
dp.message.register(start.start, CommandStart())
dp.message.register(start.setrole_command, Command(commands=["setrole"]))
dp.message.register(start.start, is_back)

dp.message.register(info.info, lambda m: m.text == "‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
dp.message.register(prompt.prompt_for_idea, lambda m: m.text == "üé® –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ª–æ–≥–æ—Ç–∏–ø–∞")
dp.message.register(vectorize.ask_for_image, lambda m: m.text == "üñº –í–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏—è")
dp.message.register(vectorize.handle_vectorization_image, is_vectorization_photo)
dp.message.register(generation.handle_idea, is_generate_text)

# –ü–æ–∫—É–ø–∫–∞ —Ç–∞—Ä–∏—Ñ–∞
dp.message.register(buy.buy_menu, lambda m: m.text and "–ö—É–ø–∏—Ç—å —Ç–∞—Ä–∏—Ñ" in m.text)
dp.message.register(
    buy.handle_buy,
    lambda m: m.text and ("BASIC" in m.text or "PRO" in m.text)
)

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø–ª–∞—Ç—ã
dp.message.register(check_payment_command, Command(commands=["check"]))
dp.message.register(check_payment_button, lambda m: m.text == CHECK_BUTTON_TEXT)  # "‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª"

@dp.message()
async def fallback_handler(message):
    state = get_user_state(message.from_user.id)
    if state == STATE_MENU:
        await message.answer("–í—ã —Å–µ–π—á–∞—Å –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∫–Ω–æ–ø–∫–æ–π –Ω–∏–∂–µ.")
    elif state == STATE_GENERATE:
        await message.answer("‚ùóÔ∏è–û–∂–∏–¥–∞–µ—Ç—Å—è —Ç–µ–∫—Å—Ç–æ–≤–∞—è –∏–¥–µ—è –ª–æ–≥–æ—Ç–∏–ø–∞.")
    elif state == STATE_VECTORIZE:
        await message.answer("‚ùóÔ∏è–û–∂–∏–¥–∞–µ—Ç—Å—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (—Ñ–æ—Ç–æ) –¥–ª—è –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.")
    else:
        await message.answer("‚ùì –ù–µ–ø–æ–Ω—è—Ç–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ. –ù–∞–∂–º–∏—Ç–µ '‚¨ÖÔ∏è –í –º–µ–Ω—é'.")

if __name__ == "__main__":
    load_db()        # –∑–∞–≥—Ä—É–∑–∫–∞ –±–∞–∑—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    load_payments()  # –∑–∞–≥—Ä—É–∑–∫–∞ –æ–∂–∏–¥–∞—é—â–∏—Ö –ø–ª–∞—Ç–µ–∂–µ–π
    asyncio.run(dp.start_polling(bot))
