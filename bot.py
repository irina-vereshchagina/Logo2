import asyncio
import logging

from aiogram import Bot, Dispatcher
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.filters import CommandStart, Command
from aiogram.fsm.storage.memory import MemoryStorage

from config import TELEGRAM_BOT_TOKEN
from handlers import start, info, prompt, generation, vectorize, buy
from utils.user_state import get_user_state, STATE_GENERATE, STATE_VECTORIZE, STATE_MENU
from utils.user_roles import load_db
from utils.payments import load_payments


# --- –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ---
logging.basicConfig(level=logging.INFO)
logging.getLogger("aiogram.event").setLevel(logging.DEBUG)


# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞/–¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞ ---
defaults = DefaultBotProperties(parse_mode=ParseMode.HTML)
bot = Bot(token=TELEGRAM_BOT_TOKEN, default=defaults)
dp = Dispatcher(storage=MemoryStorage())


# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã ---
def is_generate_text(message):
    """–¢–µ–∫—Å—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø—Ä–∏–Ω–∏–º–∞–µ–º, —Ç–æ–ª—å–∫–æ –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ GENERATE."""
    return (
        message.text
        and not message.text.startswith("/")
        and get_user_state(message.from_user.id) == STATE_GENERATE
    )


def is_vectorization_photo(message):
    """–§–æ—Ç–æ –¥–ª—è –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏–Ω–∏–º–∞–µ–º, —Ç–æ–ª—å–∫–æ –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ VECTORIZE."""
    return (
        message.photo
        and get_user_state(message.from_user.id) == STATE_VECTORIZE
    )


# --- –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤ ---

# –ë–∞–∑–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã
dp.message.register(start.start, CommandStart())
dp.message.register(start.setrole_command, Command(commands=["setrole"]))

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π "–ù–∞–∑–∞–¥" ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∏–∑ –ª—é–±–æ–≥–æ –º–µ—Å—Ç–∞
dp.message.register(start.start, lambda m: m.text == "‚¨ÖÔ∏è –í –º–µ–Ω—é")

# –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è / –ª–∏–º–∏—Ç—ã
dp.message.register(info.info, lambda m: m.text == "‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")

# –†–∞–∑–¥–µ–ª—ã
dp.message.register(prompt.prompt_for_idea,      lambda m: m.text == "üé® –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ª–æ–≥–æ—Ç–∏–ø–∞")
dp.message.register(vectorize.ask_for_image,     lambda m: m.text == "üñº –í–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏—è")

# –û–ø–ª–∞—Ç–∞: –º–µ–Ω—é, –≤—ã–±–æ—Ä —Ç–∞—Ä–∏—Ñ–∞, –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
dp.message.register(buy.buy_menu,                lambda m: m.text == "üí∞ –ö—É–ø–∏—Ç—å —Ç–∞—Ä–∏—Ñ")
dp.message.register(buy.handle_buy,              lambda m: (m.text or "").startswith("–ö—É–ø–∏—Ç—å"))
dp.message.register(buy.confirm_payment,         lambda m: (m.text or "").strip() == "‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è–º
dp.message.register(vectorize.handle_vectorization_image, is_vectorization_photo)
dp.message.register(generation.handle_idea,               is_generate_text)


# –§–æ–ª–ª–±–µ–∫: –ø–æ–¥—Å–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ —Å–µ–π—á–∞—Å –æ–∂–∏–¥–∞–µ—Ç—Å—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@dp.message()
async def fallback_handler(message):
    state = get_user_state(message.from_user.id)
    if state == STATE_MENU:
        await message.answer("‚ùóÔ∏è–í—ã —Å–µ–π—á–∞—Å –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∫–Ω–æ–ø–∫–æ–π –Ω–∏–∂–µ.")
    elif state == STATE_GENERATE:
        await message.answer("‚ùóÔ∏è–û–∂–∏–¥–∞–µ—Ç—Å—è —Ç–µ–∫—Å—Ç–æ–≤–∞—è –∏–¥–µ—è –ª–æ–≥–æ—Ç–∏–ø–∞.")
    elif state == STATE_VECTORIZE:
        await message.answer("‚ùóÔ∏è–û–∂–∏–¥–∞–µ—Ç—Å—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (—Ñ–æ—Ç–æ) –¥–ª—è –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.")
    else:
        await message.answer("‚ùì –ù–µ–ø–æ–Ω—è—Ç–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ. –ù–∞–∂–º–∏—Ç–µ '‚¨ÖÔ∏è –í –º–µ–Ω—é'.")


# --- –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ ---
if __name__ == "__main__":
    load_db()         # –º–∏–Ω–∏-–ë–î —Ä–æ–ª–µ–π/–ª–∏–º–∏—Ç–æ–≤
    load_payments()   # –ø–æ–¥—Ö–≤–∞—Ç –Ω–µ–∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–µ–π –ø–æ—Å–ª–µ —Ä–µ—Å—Ç–∞—Ä—Ç–∞
    asyncio.run(dp.start_polling(bot))
